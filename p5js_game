// A basic keyboard game in p5js. 
// reading analog values referenced from https://github.com/jonfroehlich/arduino/blob/master/GameController/AnalogKeyboardPrint/AnalogKeyboardPrint.ino
//
// By Jon Froehlich
// @jonfroehlich
// http://makeabilitylab.io
// 
// Referenced from cookie monster - https://editor.p5js.org/jonfroehlich/sketches/oUIeXC9sS

//image references
//background - https://www.dropbox.com/sh/ell3nwez2ozyb25/AADKS6quU__ULOraM0IDW-L7a?dl=0&preview=whatif2560x1440.png
//spaceship - 
//Ery Prihananto - www.eryprihananto.com

//ironman image - https://dribbble.com/shots/2687677-Iron-Man-


let imgIronman;
let alien;
let cookie;
let score = 0;
let bg;
let track;

//set up values for analog read
let csvString = "";
let values;

let drawDebugInfo = false; // set to true to turn on debug

function preload(){
  // create game character
  alien = new Alien(50, 50);
  myfont = loadFont('assets/Bangers-Regular.ttf');
  imgIronman = loadImage('assets/ironman.png');
  bg = loadImage('assets/illustration.png');
  track = loadSound('assets/sound-track.mp3');
}

function setup() {
  createCanvas(800, 500);
  frameRate(10);
  track.play();
}

function draw() {
  background(bg);  
  alien.draw();
  
  //draw ironman @@jonfroehlich
  if (values) {
    let circle1Size = map(values, 980, 1023, 0, 250);
    fill(200, 0, 0, 150);
    image(imgIronman, 500, circle1Size, 100, 150);
  }

}

function keyPressed() {

  let pixelIncrement = 8;
  if (keyCode == LEFT_ARROW) {
    alien.x = alien.x - pixelIncrement;
    alien.setDir(DIRECTION.LEFT);
  } else if (keyCode == RIGHT_ARROW) {
    alien.x = alien.x + pixelIncrement;
    alien.setDir(DIRECTION.RIGHT);
  } else if(keyCode == DOWN_ARROW){
    alien.y = alien.y + pixelIncrement; 
    alien.setDir(DIRECTION.DOWN);
  }else if(keyCode == UP_ARROW){
    alien.y = alien.y - pixelIncrement; 
    alien.setDir(DIRECTION.UP);
  }
  
  if(alien.getTop() < 0){
    alien.y = 0; 
  }else if(alien.getBottom() > height){
    alien.y = height - alien.height; 
  }
  
  if(alien.getLeft() < 0){
    alien.x = 0; 
  }else if(alien.getRight() > width){
    alien.x = width - alien.width; 
  }
  
  
  //read analog and control height of ironman @@jonfroehlich
  print(key);

  if (key == ",") {
    values = int(csvString);
    print(values);
    csvString = "";
  } else {
    csvString += key;
  }
  
}


const DIRECTION = {
  LEFT: 'left',
  RIGHT: 'right',
  UP: 'up',
  DOWN: 'down'
}

class Alien extends Shape{
  
  constructor(x, y){
    // dimensions of the alien pngs are 200x229
    // mouth is ~46 pixels in height and 132 pixels from top
    let imgHeight = 229;
    let imgWidth = 200;
    
    let scaledHeight = 80;
    let scaledWidth = scaledHeight / imgHeight * imgWidth;
    
    super(x, y, scaledWidth, scaledHeight);
    
    this.imgOpenMouth = loadImage('assets/ufo-animation-1.png');
    this.imgClosedMouth = loadImage('assets/ufo-animation-2.png');
    this.curDirection = DIRECTION.RIGHT;
    this.fillColor =  color(128, 0, 0);
  
  }
  
  setDir(direction){
    this.curDirection = direction; 
  }
  
  draw(){
    push();
    
    let img = this.imgOpenMouth;
    if (frameCount % 10){
      img = this.imgClosedMouth; 
    }
  
    if(this.curDirection == DIRECTION.LEFT){
      translate(this.x + this.width, this.y); 
    }else if(this.curDirection == DIRECTION.RIGHT){
      translate(this.x, this.y);  
    }else if(this.curDirection == DIRECTION.DOWN){
      translate(this.x + this.height, this.y); 
      rotate(HALF_PI);
    }else if(this.curDirection == DIRECTION.UP){
      translate(this.x, this.y + this.width); 
      rotate(-HALF_PI);
    }

    image(img, 0, 0, this.width, this.height);
    
    if(drawDebugInfo){
      push();
      stroke(255,0,0);
      noFill();
      rect(this.x, this.y, this.width, this.height);
      pop();
    }
  }
}

// This CSVToArray code from : https://stackoverflow.com/a/1293163
//
// ref: http://stackoverflow.com/a/1293163/2343
// This will parse a delimited string into an array of
// arrays. The default delimiter is the comma, but this
// can be overriden in the second argument.
function CSVToArray(strData, strDelimiter) {
  // Check to see if the delimiter is defined. If not,
  // then default to comma.
  strDelimiter = (strDelimiter || ",");

  // Create a regular expression to parse the CSV values.
  var objPattern = new RegExp(
    (
      // Delimiters.
      "(\\" + strDelimiter + "|\\r?\\n|\\r|^)" +

      // Quoted fields.
      "(?:\"([^\"]*(?:\"\"[^\"]*)*)\"|" +

      // Standard fields.
      "([^\\" + strDelimiter + "\\r\\n]*))"
    ),
    "gi"
  );


  // Create an array to hold our data. Give the array
  // a default empty first row.
  var arrData = [
    []
  ];

  // Create an array to hold our individual pattern
  // matching groups.
  var arrMatches = null;


  // Keep looping over the regular expression matches
  // until we can no longer find a match.
  while (arrMatches = objPattern.exec(strData)) {

    // Get the delimiter that was found.
    var strMatchedDelimiter = arrMatches[1];

    // Check to see if the given delimiter has a length
    // (is not the start of string) and if it matches
    // field delimiter. If id does not, then we know
    // that this delimiter is a row delimiter.
    if (
      strMatchedDelimiter.length &&
      strMatchedDelimiter !== strDelimiter
    ) {

      // Since we have reached a new row of data,
      // add an empty row to our data array.
      arrData.push([]);

    }

    var strMatchedValue;

    // Now that we have our delimiter out of the way,
    // let's check to see which kind of value we
    // captured (quoted or unquoted).
    if (arrMatches[2]) {

      // We found a quoted value. When we capture
      // this value, unescape any double quotes.
      strMatchedValue = arrMatches[2].replace(
        new RegExp("\"\"", "g"),
        "\""
      );

    } else {

      // We found a non-quoted value.
      strMatchedValue = arrMatches[3];

    }


    // Now that we have our value string, let's add
    // it to the data array.
    arrData[arrData.length - 1].push(strMatchedValue);
  }

  // Return the parsed data.
  return (arrData);
}
